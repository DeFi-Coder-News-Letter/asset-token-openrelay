version: "3"
services:
  redis:
    image: redis:alpine
    ports:
      - "6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  postgres:
    image: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_PASSWORD: secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  ethnode:
    build:
      context: ./
      dockerfile: Dockerfile.testrpc
    ports:
      - "8545"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    # command: ["testrpc", "--networkId", "50", "--debug", "-p", "8545", "--db", "/testrpcdb", "-m", "concert load couple harbor equip island argue ramp clarify fence smart topic"]
  ingest:
    build:
      context: ./
      dockerfile: Dockerfile.ingest
    image: openrelay/ingest
    ports:
      - "8081:8080"
    command: ["/ingest", "${REDIS_HOST:-redis:6379}", "C22d5b2951DB72B44CFb8089bb8CD374A3c354eA"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  exchangesplitter:
    build:
      context: ./
      dockerfile: Dockerfile.exchangesplitter
    image: openrelay/exchangesplitter
    command: ["/exchangesplitter", "${REDIS_HOST:-redis:6379}", "queue://ingest", "queue://fillupdate", "0x1dad4783cf3fe3085c1426157ab175a6119a04ba=queue://fillupdate-othernet"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fillupdate:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: openrelay/fillupdate
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://fillupdate", "queue://fundcheck"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fundcheckrelay:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: openrelay/fundcheckrelay
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://fundcheck", "queue://delay1", "topic://instant-broadcast"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure
  delayrelay1:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    image: openrelay/delayrelay
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay1", "queue://delay2", "topic://delay1trigger"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  delayrelay2:
    build:
      context: ./
      dockerfile: Dockerfile.delayrelay
    image: openrelay/delayrelay
    command: ["/delayrelay", "${REDIS_HOST:-redis:6379}", "queue://delay2", "queue://released", "topic://newblocks", "topic://delay1trigger"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  blockmonitor:
    build:
      context: ./
      dockerfile: Dockerfile.blockmonitor
    image: openrelay/blockmonitor
    command: ["./node_modules/.bin/truffle", "exec", "blockMonitor.js", "redis://${REDIS_HOST:-redis:6379}", "topic://newblocks", "--network", "main"]
    environment:
      ETHEREUM_URL: "http://ethnode:8545"
      USE_FILTER_PROVIDER: "1"
    depends_on:
      - redis
      - ethnode
    restart: on-failure
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  exchangemonitor:
    build:
      context: ./
      dockerfile: Dockerfile.fillmonitor
    image: openrelay/fillmonitor
    command: ["./node_modules/.bin/truffle", "exec", "exchangeMonitor.js", "redis://${REDIS_HOST:-redis:6379}", "queue://ordersfilled", "0xC22d5b2951DB72B44CFb8089bb8CD374A3c354eA", "--network", "main"]
    environment:
      ETHEREUM_URL: "http://ethnode:8545"
      USE_FILTER_PROVIDER: "1"
    depends_on:
      - ethnode
  fillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.fillindexer
    image: openrelay/fillindexer
    command: ["python", "/project/fill_indexer.py", "${REDIS_HOST:-redis:6379}", "dynamodbordersfilled", "-l", "DEBUG"]
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    depends_on:
      - dynamo

  pgfillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgfillindexer
    image: openrelay/pgfillindexer
    command: ["/fillindexer", "redis:6379", "queue://pgordersfilled", "postgres", "postgres", "env://POSTGRES_PASSWORD"]
    environment:
      POSTGRES_PASSWORD: secret
    depends_on:
      - dynamo
    restart: on-failure

  simplerelayreleased:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: openrelay/simplerelay
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "queue://released", "queue://recheck", "topic://released-broadcast"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fillupdate2:
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: openrelay/fillupdate
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://recheck", "queue://recheck2"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  fundcheckrelay2:
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: openrelay/fundcheckrelay
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://recheck2", "queue://preindex"]
    depends_on:
      - ethnode
    restart: on-failure
  initialize:
    build:
      context: ./
      dockerfile: Dockerfile.initialize
    image: openrelay/initialize
    command: ["/initialize", "${REDIS_HOST:-redis:6379}", "${ZRX_FEE:-500000000000000000}", "${RELAY_ADDRESS:-C22d5b2951DB72B44CFb8089bb8CD374A3c354eA}"]
    depends_on:
      - redis
  contractinit:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    command: ["/project/setup.sh", "redis://${REDIS_HOST:-redis:6379}"]
    environment:
      ETHEREUM_URL: "http://ethnode:8545"
    depends_on:
      - redis
  entrypoint:
    build:
      context: ./
      dockerfile: Dockerfile.testinit
    volumes:
      - "./js:/project"
    command: ["node", "/project/hang.js"]
  dynamo:
    image: cnadiminti/dynamodb-local
  pgindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgindexer
    image: openrelay/pgindexer
    environment:
      POSTGRES_PASSWORD: password
    command: ["/indexer", "${REDIS_HOST:-redis:6379}", "queue://pgindexer", "postgres", "indexer", "env://POSTGRES_PASSWORD"]
    depends_on:
      - postgres
      - redis
    restart: on-failure
  pgautomigrate:
    build:
      context: ./
      dockerfile: Dockerfile.automigrate
    image: openrelay/automigrate
    environment:
      POSTGRES_PASSWORD: secret
      INDEX_PASSWORD: password
      SEARCH_PASSWORD: password
    command: ["/automigrate", "postgres", "postgres", "env://POSTGRES_PASSWORD", "indexer;env://INDEX_PASSWORD;orders.SELECT,orders.INSERT,orders.UPDATE", "search;env://SEARCH_PASSWORD;orders.SELECT"]
    depends_on:
      - postgres
    restart: on-failure
  indexer:
    build:
      context: ./
      dockerfile: Dockerfile.indexer
    image: openrelay/indexer
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/indexer.py", "${REDIS_HOST:-redis:6379}", "indexer", "--create"]
    depends_on:
      - dynamo
      - redis
  api:
    build:
      context: ./
      dockerfile: Dockerfile.searchapi
    image: openrelay/searchapi
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/api.py", "${REDIS_HOST:-redis:6379}", "newblocks", "-l", "debug"]
  pgapi:
    build:
      context: ./
      dockerfile: Dockerfile.pgsearchapi
    image: openrelay/pgsearchapi
    ports:
      - "8082:8080"
    command: ["/searchapi", "${REDIS_HOST:-redis:6379}", "topic://newblocks", "postgres", "search", "env://POSTGRES_PASSWORD"]
    environment:
      POSTGRES_PASSWORD: password
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    restart: on-failure
  ordercheckenqueue:
    # This node uses dynamodb to continuously requeue orders to be checked
    # again on an ongoing basis
    build:
      context: ./
      dockerfile: Dockerfile.queueorders
    image: openrelay/queueorders
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/queue_orders.py", "${REDIS_HOST:-redis:6379}", "continuous_recheck", "-r", "-l", "debug"]
    depends_on:
      - indexer
  fillupdate_continous:
    # This node makes sure filled / cancelled values are up to date. Any
    # changes get forwarded to the indexer, and all orders get forwarded to the
    # inverted fund checker
    build:
      context: ./
      dockerfile: Dockerfile.fillupdate
    image: openrelay/fillupdate
    command: ["/fillupdate", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://continuous_recheck", "queue://fund_continuous_recheck", "queue://preindex"]
    depends_on:
      - redis
      - ethnode
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  simplerelayindexer:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: openrelay/simplerelay
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "queue://preindex", "queue://indexer", "queue://pgindexer"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  simplerelayfillindexer:
    build:
      context: ./
      dockerfile: Dockerfile.simplerelay
    image: openrelay/simplerelay
    command: ["/simplerelay", "${REDIS_HOST:-redis:6379}", "queue://ordersfilled", "queue://dynamodbordersfilled", "queue://pgordersfilled"]
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  fundcheckrelay_continuous:
    # This fund checker passes on orders that have insufficient funds to be
    # removed from the index
    build:
      context: ./
      dockerfile: Dockerfile.fundcheckrelay
    image: openrelay/fundcheckrelay
    command: ["/fundcheckrelay", "${REDIS_HOST:-redis:6379}", "${ETHEREUM_STATE_NODE:-http://ethnode:8545}", "queue://fund_continuous_recheck", "queue://unindexer", "queue://pgunindexer", "--invert"]
    depends_on:
      - ethnode
    restart: on-failure
  unindexer:
    build:
      context: ./
      dockerfile: Dockerfile.indexer
    image: openrelay/indexer
    environment:
      DYNAMODB_HOST: http://dynamo:8000
      AWS_ACCESS_KEY_ID: x
      AWS_SECRET_ACCESS_KEY: x
    command: ["python", "/project/indexer.py", "${REDIS_HOST:-redis:6379}", "unindexer", "--unindex"]
    depends_on:
      - dynamo
      - redis
  pgunindexer:
    build:
      context: ./
      dockerfile: Dockerfile.pgindexer
    image: openrelay/pgindexer
    environment:
      POSTGRES_PASSWORD: secret
    command: ["/indexer", "${REDIS_HOST:-redis:6379}", "queue://pgunindexer", "postgres", "postgres", "env://POSTGRES_PASSWORD", "--unfunded"]
    depends_on:
      - postgres
      - redis
    restart: on-failure
